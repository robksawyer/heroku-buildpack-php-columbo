#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# clean up leaking environment
unset GIT_DIR

BIN_DIR=`dirname $(readlink -f $0)`
BUILD_DIR=$1
CACHE_DIR=$2
if [ "$APPLICATION_ENV" = "local" ]; then
    LOCAL_REPO_DIR=$3
fi
BUNDLE_DIR="$CACHE_DIR/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
CURL_CMD="curl --silent --max-time 60 -O --location"

. $BIN_DIR/../variables.sh

# Compare the md5 of the manifest file with the specified file
# Retrieved on 2012-11-17 from https://github.com/iphoting/heroku-buildpack-php-tyler/blob/master/bin/compile
# Modified by Jesse Patching <jesse@radpenguin.ca> for use in taeram/heroku-buildpack-php-columbo
function check_md5() {
    TARGET="$1"
    REMOTE_MD5SUM=`cat "${BUNDLE_DIR}/${MANIFEST_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
    LOCAL_MD5SUM=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
    ! [ "$REMOTE_MD5SUM" = "$LOCAL_MD5SUM" ]
}

# Indent the string
function indent() {
  sed -u 's/^/       /'
}

# include .files when moving things around
shopt -s dotglob

pushd $BUILD_DIR > /dev/null
if [ "$APPLICATION_ENV" = "local" ]; then
    # If in local env, just symlink the repo to here
    ln -s "$LOCAL_REPO_DIR" ./www
else
    # Move all app code to www
    mkdir -p $CACHE_DIR/www
    mv * $CACHE_DIR/www
    mv $CACHE_DIR/www .
fi

# keep the Procfile
if [ -f www/Procfile ]; then
  cp www/Procfile .
fi

# keep the package.json
if [ -f www/package.json ]; then
  cp www/package.json .
fi
popd > /dev/null

# Download the bundles
mkdir -p $BUNDLE_DIR $BUILD_DIR/bin
export PATH=$PATH:$BUILD_DIR/bin
pushd $BUNDLE_DIR > /dev/null

if [ -n "`find . -type f -atime +30`" ]; then
    echo "-----> Pruning old cached files"
    find . -type f -atime +30 -delete | indent
fi

echo "-----> Fetching Manifest"
$CURL_CMD "http://heroku-precompiled-bins.s3.amazonaws.com/$MANIFEST_FILE"

if [ ! -f "$APACHE_TGZ_FILE" ] || check_md5 "$APACHE_TGZ_FILE"; then
    echo "-----> Bundling Apache v${APACHE_VERSION}"
    $CURL_CMD "http://heroku-precompiled-bins.s3.amazonaws.com/$APACHE_TGZ_FILE"
else
    echo "-----> Using cached Apache v${APACHE_VERSION}"
fi
tar xf $APACHE_TGZ_FILE -C $BUILD_DIR

if [ ! -f "$PHP_TGZ_FILE" ] || check_md5 "$PHP_TGZ_FILE"; then
    echo "-----> Bundling PHP version v${PHP_VERSION}"
    $CURL_CMD "http://heroku-precompiled-bins.s3.amazonaws.com/$PHP_TGZ_FILE"
else
    echo "-----> Using cached PHP v${PHP_VERSION}"
fi
tar xf $PHP_TGZ_FILE -C $BUILD_DIR

# Set the composer cache directory
export COMPOSER_HOME=$CACHE_DIR/composer

# Make php available to the compiled app and rollout script
ln -s /app/php/bin/php $BUILD_DIR/bin/php
ln -s /app/php/bin/composer $BUILD_DIR/bin/composer
export PATH=$PATH:$BUILD_DIR/php/bin

if [ ! -f "$ANT_TGZ_FILE" ] || check_md5 "$ANT_TGZ_FILE"; then
    echo "-----> Bundling Ant version v${ANT_VERSION} "
    $CURL_CMD "http://heroku-precompiled-bins.s3.amazonaws.com/$ANT_TGZ_FILE"
else
    echo "-----> Using cached Ant v${ANT_VERSION}"
fi
tar xf $ANT_TGZ_FILE -C $BUILD_DIR

# Make ant available to the compiled app and rollout script
ln -s /app/ant/bin/ant $BUILD_DIR/bin/ant
export PATH=$PATH:$BUILD_DIR/ant/bin

if [ ! -f "$NEWRELIC_TGZ_FILE" ] || check_md5 "$NEWRELIC_TGZ_FILE"; then
    echo "-----> Bundling New Relic v${NEWRELIC_VERSION}"
    $CURL_CMD "http://heroku-precompiled-bins.s3.amazonaws.com/$NEWRELIC_TGZ_FILE"
else
    echo "-----> Using cached New Relic v${NEWRELIC_VERSION}"
fi
tar xf $NEWRELIC_TGZ_FILE -C $BUILD_DIR

popd > /dev/null

pushd $BUILD_DIR > /dev/null

# update config files
cp $LP_DIR/conf/apache/httpd.conf apache/conf
cp $LP_DIR/conf/php/php.ini php/php.ini
cp $LP_DIR/conf/php/conf.d/* php/conf.d/

# PHP shared library path (just for the compile step)
export LD_LIBRARY_PATH=$BUILD_DIR/php/ext:$BUILD_DIR/php/local/lib

# Create the logs directory
mkdir -p $BUILD_DIR/logs

# Check if we need nodejs
pushd $BUILD_DIR > /dev/null
if [ -f package.json ]; then
    $BIN_DIR/compile-nodejs "$BUILD_DIR" "$CACHE_DIR"

    # Make the node binaries available to the rollout script
    export PATH=$PATH:$BUILD_DIR/node_modules/.bin/
fi
popd > /dev/null

# Check if we have Composer dependencies and vendors are not bundled
pushd $BUILD_DIR > /dev/null
if [ -f www/composer.json ] && [ ! -d www/vendor ]; then
    GIT_DIR_ORIG=$GIT_DIR
    unset GIT_DIR
    echo "-----> Installing Composer dependencies"
    cd www
    LD_LIBRARY_PATH=$BUILD_DIR/php/ext $BUILD_DIR/php/bin/php -c $LP_DIR/conf/php.ini composer install --prefer-source
    rm -rf vendor/**/.git
    cd $BUILD_DIR
    rm www/composer
    export GIT_DIR=$GIT_DIR_ORIG
fi
popd > /dev/null

# Run the rollout script
pushd $BUILD_DIR > /dev/null
if [ -f www/rollout.sh ]; then
    ./www/rollout.sh "$BUILD_DIR" "$CACHE_DIR" "$APPLICATION_ENV"
fi
popd > /dev/null

cat >> boot.sh <<EOF
    # Make the Heroku environment variables available to Apache and PHP
    echo "-----> Including env variables in Apache"
    for var in \`env|cut -f1 -d=\`; do
        echo "PassEnv \$var" >> /app/apache/conf.d/envvars.conf;
    done

    if [ -f www/config/apache.conf ]; then
        echo "-----> Including custom Apache config"
        ln -s /app/www/config/apache.conf /app/apache/conf.d/app.conf
    fi

    # Insert the New Relic key (from heroku config) into newrelic.ini
    sed -i "s|REPLACE_WITH_REAL_KEY|${NEW_RELIC_LICENSE_KEY}|g" /app/php/conf.d/newrelic.ini

    # PHP shared library path (for the application)
    export LD_LIBRARY_PATH=/app/php/ext:/app/php/local/lib

    echo "-----> Launching apache"
    if [ "\$APPLICATION_ENV" = "local" ]; then
        # Disable apc
        rm -f /app/php/conf.d/apc.ini

        # Disable new relic
        rm -f /app/php/conf.d/newrelic.ini

        # Change who apache runs as
        echo "User $USER" > /app/apache/conf.d/user.conf
        echo "Group $USER" >> /app/apache/conf.d/user.conf

        sudo -E LD_LIBRARY_PATH=\$LD_LIBRARY_PATH /app/apache/bin/httpd
    else
        # Tail the logs
        tail --follow=name --retry --quiet /app/logs/* &

        exec /app/apache/bin/httpd -DNO_DETACH
    fi
EOF

chmod +x boot.sh

if [ "$APPLICATION_ENV" = "local" ]; then
    cat >> restart.sh <<EOF
        # PHP shared library path (for the application)
        export LD_LIBRARY_PATH=/app/php/ext:/app/php/local/lib

        sudo killall httpd
        sleep 1
        sudo -E LD_LIBRARY_PATH=\$LD_LIBRARY_PATH /app/apache/bin/httpd
EOF
    chmod +x restart.sh
fi

popd > /dev/null
