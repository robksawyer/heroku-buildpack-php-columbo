#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# clean up leaking environment
unset GIT_DIR

BIN_DIR=`dirname $(readlink -f $0)`
BUILD_DIR=$1
CACHE_DIR=$2
BUNDLE_DIR="$CACHE_DIR/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
CURL_CMD="curl --silent --max-time 60 -O --location"

. $BIN_DIR/../variables.sh
. $BIN_DIR/../support/utils.sh

# include .files when moving things around
shopt -s dotglob

pushd $BUILD_DIR > /dev/null

# Move all app code to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep the Procfile
if [ -f www/Procfile ]; then
  cp www/Procfile .
fi

# keep the package.json
if [ -f www/package.json ]; then
  cp www/package.json .
fi
popd > /dev/null

# Download the bundles
mkdir -p $BUNDLE_DIR $BUILD_DIR/bin
export PATH=$PATH:$BUILD_DIR/bin
pushd $BUNDLE_DIR > /dev/null

if [ -n "`find . -type f -atime +30`" ]; then
    echo "-----> Pruning old cached files"
    find . -type f -atime +30 -delete | indent
fi

echo "-----> TGZs will be downloaded from: $BUILDPACK_S3_BUCKET_URL"
echo "-----> Using the command: $CURL_CMD"

echo "-----> Fetching Manifest"
$CURL_CMD "$BUILDPACK_S3_BUCKET_URL/$MANIFEST_FILE"

if [ ! -f "$APACHE_TGZ_FILE" ] || check_md5 "$APACHE_TGZ_FILE"; then
    echo "-----> Bundling Apache v${APACHE_VERSION}"
    $CURL_CMD "$BUILDPACK_S3_BUCKET_URL/$APACHE_TGZ_FILE"
else
    echo "-----> Using cached Apache v${APACHE_VERSION}"
fi
tar xf $APACHE_TGZ_FILE -C $BUILD_DIR

if [ ! -f "$PHP_TGZ_FILE" ] || check_md5 "$PHP_TGZ_FILE"; then
    echo "-----> Bundling PHP version v${PHP_VERSION}"
    $CURL_CMD "$BUILDPACK_S3_BUCKET_URL/$PHP_TGZ_FILE"
else
    echo "-----> Using cached PHP v${PHP_VERSION}"
fi
tar xf $PHP_TGZ_FILE -C $BUILD_DIR

# Set the composer cache directory
export COMPOSER_HOME=$CACHE_DIR/composer

# Make php available to the compiled app and rollout script
ln -s /app/php/bin/php $BUILD_DIR/bin/php
ln -s /app/php/bin/composer $BUILD_DIR/bin/composer
export PATH=$PATH:$BUILD_DIR/php/bin

if [ ! -f "$ANT_TGZ_FILE" ] || check_md5 "$ANT_TGZ_FILE"; then
    echo "-----> Bundling Ant version v${ANT_VERSION} "
    $CURL_CMD "$BUILDPACK_S3_BUCKET_URL/$ANT_TGZ_FILE"
else
    echo "-----> Using cached Ant v${ANT_VERSION}"
fi
tar xf $ANT_TGZ_FILE -C $BUILD_DIR

# Make ant available to the compiled app and rollout script
ln -s /app/ant/bin/ant $BUILD_DIR/bin/ant
export PATH=$PATH:$BUILD_DIR/ant/bin

if [ ! -f "$NEWRELIC_TGZ_FILE" ] || check_md5 "$NEWRELIC_TGZ_FILE"; then
    echo "-----> Bundling New Relic v${NEWRELIC_VERSION}"
    $CURL_CMD "$BUILDPACK_S3_BUCKET_URL/$NEWRELIC_TGZ_FILE"
else
    echo "-----> Using cached New Relic v${NEWRELIC_VERSION}"
fi
tar xf $NEWRELIC_TGZ_FILE -C $BUILD_DIR

popd > /dev/null

pushd $BUILD_DIR > /dev/null

# update config files
cp $LP_DIR/conf/apache/httpd.conf apache/conf
cp $LP_DIR/conf/php/php.ini php/php.ini
cp $LP_DIR/conf/php/conf.d/* php/conf.d/
cp $LP_DIR/conf/php/php-fpm.conf php/etc/php-fpm.conf
cp $LP_DIR/conf/php/php-fpm-wrapper php/sbin/php-fpm-wrapper

# PHP shared library path (just for the compile step)
export LD_LIBRARY_PATH=$BUILD_DIR/php/ext:$BUILD_DIR/php/local/lib

# Create the logs and directories
mkdir -p $BUILD_DIR/logs
mkdir -p $BUILD_DIR/run

# Check if we need nodejs
pushd $BUILD_DIR > /dev/null
if [ -f package.json ]; then
    $BIN_DIR/compile-nodejs "$BUILD_DIR" "$CACHE_DIR"

    # Make the node binaries available to the rollout script
    export PATH=$PATH:$BUILD_DIR/node_modules/.bin/
fi
popd > /dev/null

# Run the rollout script
pushd $BUILD_DIR > /dev/null
if [ -f www/rollout.sh ]; then
    ./www/rollout.sh "$BUILD_DIR" "$CACHE_DIR" "$APPLICATION_ENV"
fi
popd > /dev/null

cat >> boot.sh <<EOF
    # Make the Heroku environment variables available to Apache
    echo "-----> Including env variables in Apache"
    for var in \`env|cut -f1 -d=\`; do
        echo "PassEnv \$var" >> /app/apache/conf.d/envvars.conf;
    done

    if [ -f www/config/apache.conf ]; then
        echo "-----> Including custom Apache config"
        ln -s /app/www/config/apache.conf /app/apache/conf.d/app.conf
    fi

    if [ -f www/config/php.ini ]; then
        echo "-----> Including custom PHP config"
        ln -s /app/www/config/php.ini /app/php/conf.d/php.custom.ini
    fi

    echo "-----> Giving PHP FPM access to the env variables"
    env | awk '{print "export \""\$0"\""}' > /app/php/sbin/php-fpm.envvars

    if [ -f www/config/php-fpm.conf ]; then
        echo "-----> Including custom PHP FPM config"
        ln -s /app/www/config/php-fpm.conf /app/php/etc/fpm.d/php-fpm.custom.conf
    fi

    # Insert the New Relic key (from heroku config) into newrelic.ini
    sed -i "s|REPLACE_WITH_REAL_KEY|${NEW_RELIC_LICENSE_KEY}|g" /app/php/conf.d/newrelic.ini

    # PHP shared library path (for the application)
    export LD_LIBRARY_PATH=/app/php/ext:/app/php/local/lib

    echo "-----> Launching PHP FPM"
    /app/php/sbin/php-fpm --nodaemonize &

    echo "-----> Launching apache"
    # Tail the logs
    tail --follow=name --retry --quiet /app/logs/* &

    exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

popd > /dev/null